hid <- sapply(slot(sppolys, "polygons"), function(x) slot(x, "ID"))
areas <- sapply(slot(sppolys, "polygons"), function(x) slot(x, "area"))
df <- data.frame(hid,areas)
names(df) <- c("HID","Area")
rownames(df) <- df$HID
res <- SpatialPolygonsDataFrame(sppolys, data=df)
res <- res[which(res@data$Area > 0),]
}
return(res)
}
poligono <-mapview() %>% editMap()
#| label: "lib buffer"
# librerias requeridas
library(sf)
library(mapedit)
library(mapview)
library(tidyverse)
poligono <-mapview() %>% editMap()
poligono <-mapview() %>% editMap()
plot(poligono)
mapview(poligono)
#transformar sistemas de coordenadas
polig<- poligono$finished %>% st_transform(crs=32618)
mapview(poligono$finished)
#transformar sistemas de coordenadas
polig<- poligono$finished %>% st_transform(crs=32618)
#| label: "creando buffer"
# creando buffer
polibuff<-st_buffer(polig, dist= 10000) #<1>
mapview(list(polig, polibuff))
puntbuff<-st_buffer(point, dist= 5000)
write_sf(polig$geometry, "shape/polig.shp")
write_sf(polig$geometry, "shape/polig.shp")
write_sf(polig$feature_type, "shape/polig.shp")
mapview(poligono$drawn)
write_sf(poligono$drawn, "shape/polig.shp")
write_sf(poligono$drawn, "shape/polig.shp")
write_sf(poligono$drawn, "polig.shp")
ah2sp <- function(x, increment=360, rnd=10, proj4string=CRS(as.character(NA))){
require(alphahull)
require(maptools)
if (class(x) != "ahull"){
stop("x needs to be an ahull class object")
}
# Extract the edges from the ahull object as a dataframe
xdf <- as.data.frame(x$arcs)
# Remove all cases where the coordinates are all the same
xdf <- subset(xdf,xdf$r > 0)
res <- NULL
if (nrow(xdf) > 0){
# Convert each arc to a line segment
linesj <- list()
prevx<-NULL
prevy<-NULL
j<-1
for(i in 1:nrow(xdf)){
rowi <- xdf[i,]
v <- c(rowi$v.x, rowi$v.y)
theta <- rowi$theta
r <- rowi$r
cc <- c(rowi$c1, rowi$c2)
# Arcs need to be redefined as strings of points. Work out the number of       points to allocate in this arc segment.
ipoints <- 2 + round(increment * (rowi$theta / 2),0)
# Calculate coordinates from arc() description for ipoints along the arc.
angles <- anglesArc(v, theta)
seqang <- seq(angles[1], angles[2], length = ipoints)
x <- round(cc[1] + r * cos(seqang),rnd)
y <- round(cc[2] + r * sin(seqang),rnd)
# Check for line segments that should be joined up and combine their coordinates
if (is.null(prevx)){
prevx<-x
prevy<-y
} else if (x[1] == round(prevx[length(prevx)],rnd) && y[1] ==
round(prevy[length(prevy)],rnd)){
if (i == nrow(xdf)){
#We have got to the end of the dataset
prevx<-append(prevx,x[2:ipoints])
prevy<-append(prevy,y[2:ipoints])
prevx[length(prevx)]<-prevx[1]
prevy[length(prevy)]<-prevy[1]
coordsj<-cbind(prevx,prevy)
colnames(coordsj)<-NULL
# Build as Line and then Lines class
linej <- Line(coordsj)
linesj[[j]] <- Lines(linej, ID = as.character(j))
} else {
prevx<-append(prevx,x[2:ipoints])
prevy<-append(prevy,y[2:ipoints])
}
} else {
# We have got to the end of a set of lines, and there are several such     sets, so convert the whole of this one to a line segment and reset.
prevx[length(prevx)]<-prevx[1]
prevy[length(prevy)]<-prevy[1]
coordsj<-cbind(prevx,prevy)
colnames(coordsj)<-NULL
# Build as Line and then Lines class
linej <- Line(coordsj)
linesj[[j]] <- Lines(linej, ID = as.character(j))
j<-j+1
prevx<-NULL
prevy<-NULL
}
}
# Promote to SpatialLines
lspl <- SpatialLines(linesj)
# Convert lines to polygons
# Pull out Lines slot and check which lines have start and end points that are the same
lns <- slot(lspl, "lines")
polys <- sapply(lns, function(x) {
crds <- slot(slot(x, "Lines")[[1]], "coords")
identical(crds[1, ], crds[nrow(crds), ])
})
# Select those that do and convert to SpatialPolygons
polyssl <- lspl[polys]
list_of_Lines <- slot(polyssl, "lines")
sppolys <- SpatialPolygons(list(Polygons(lapply(list_of_Lines, function(x)
{ Polygon(slot(slot(x, "Lines")[[1]], "coords")) }), ID = "1")),
proj4string=proj4string)
# Create a set of ids in a dataframe, then promote to SpatialPolygonsDataFrame
hid <- sapply(slot(sppolys, "polygons"), function(x) slot(x, "ID"))
areas <- sapply(slot(sppolys, "polygons"), function(x) slot(x, "area"))
df <- data.frame(hid,areas)
names(df) <- c("HID","Area")
rownames(df) <- df$HID
res <- SpatialPolygonsDataFrame(sppolys, data=df)
res <- res[which(res@data$Area > 0),]
}
return(res)
}
install.packages("rgbif")
library(tidyverse)
library(rgbif)
# descargando datos
# Instalar y cargar la librería rgbif si no está instalada
if(!require(rgbif)) {
install.packages("rgbif")
}
library(rgbif)
# Parámetros de búsqueda
taxon_key <- name_backbone(name="Mammalia")$usageKey # Buscar el código del taxón Mammalia
country_code <- "CO" # Código ISO para Colombia
department <- "Magdalena" # Departamento Magdalena
# Realizar la búsqueda de datos
occ_data <- occ_search(
taxonKey = taxon_key,
country = country_code,
stateProvince = department,
hasCoordinate = TRUE,  # Filtrar solo registros con coordenadas
limit = 1000 # Límite de registros
)
# Ver los primeros resultados
head(occ_data$data)
occ<- data.frame(occ_data$data)
view(occ)
occ_depu<- occ |> select(-c(5,7,8,9,10,11,12,13,14,17,18,19,20,21,22,23,24,25,26,34,35,39,43:50))
glimpse(occ_depu)
occ_depu<- occ |> select(-c(5,7,8,9,10,11,12,13,14,17,18,19,20,21,22,23,24,25,26,34,35,39,43:147))
glimpse(occ_depu)
write.csv2(occ_depu, "obs_mamigeros.csv")
dir()
mamifero<- read.csv2("observations_naturalist.csv")
View(mamifero)
mamifero<- read.csv2("observations_naturalist.csv", header = TRUE)
View(mamifero)
mamifero<- read.csv("observations_naturalist.csv", header = TRUE)
View(mamifero)
# filtrando base de datos de inaturalist
library(readr)
mamifero <- read_csv("posts/datos_GBIF/observations_naturalist.csv")
mamifero <- read_csv("posts/datos_GBIF/observations_naturalist.csv")
mamifero <- read_csv("observations_naturalist.csv")
View(mamifero)
# datos de herpetos
if(!require(rgbif)) {
install.packages("rgbif")
}
library(rgbif)
# Parámetros de búsqueda
taxon_key <- name_backbone(name="Reptilia")$usageKey # Buscar el código del taxón Mammalia
country_code <- "CO" # Código ISO para Colombia
department <- "Magdalena" # Departamento Magdalena
# Realizar la búsqueda de datos
occ_data <- occ_search(
taxonKey = taxon_key,
country = country_code,
stateProvince = department,
hasCoordinate = TRUE,  # Filtrar solo registros con coordenadas
limit = 2000 # Límite de registros
)
# Ver los primeros resultados
head(occ_data$data)
occ_reptilia<- data.frame(occ_data$data)
occ_depu<- occ_reptilia |> select(-c(5,7,8,9,10,11,12,13,14,17,18,19,20,21,22,23,24,25,26,34,35,39,43:147))
occ_reptilia<- data.frame(occ_data$data)
occ_depu<- occ_reptilia |> select(-c(5,7,8,9,10,11,12,13,14,17,18,19,20,21,22,23,24,25,26,34,35,39,43:147))
library(tidyverse)
occ_depu_r<- occ_reptilia |> select(-c(5,7,8,9,10,11,12,13,14,17,18,19,20,21,22,23,24,25,26,34,35,39,43:147))
view(occ_reptilia)
occ_depu_r<- occ_reptilia |> select(-c(7,8,9,10:13,14,17:24,36:50))
glimpse(occ_depu_r)
occ_depu_r<- occ_reptilia |> select(-c(7,8,9,10:13,14,17:24,36:58,60:101))
glimpse(occ_depu_r)
write.csv2(occ_depu_r, "obs_reptilia.csv")
levels(occ_depu_r$class)
names(occ_depu_r$class)
glimpse(occ_depu_r)
occ_depu_r$class <- as.factor(occ_depu_r$class)
# Ver los niveles de la variable categórica "class"
nombres_categorias <- levels(occ_depu_r$class)
print(nombres_categorias)
occ_r<- occ_depu_r |> filter(class == c("Amphibia", "Mammalia" , "Squamata"))
occ_r <- occ_depu_r |> filter(class == c("Amphibia", "Mammalia" , "Squamata"))
view(occ_r)
write.csv2(occ_r, "obs_reptilia.csv")
# para descargar los datos
write.xlsx(resultado_completo, rowNames = FALSE)
#| label: librerias
# liberias requeridas
library(taxize) # acceder a datos de UICN
library(tidyverse)
library(readxl)
library(rredlist)
library(writexl)
#| label: open data
data<- read_excel("especies.xlsx")
head(data)
glimpse(data)
sp.list<- data |> distinct(`Nombre científico`)
sp.list
# obteniendo datos UICN
API <- "MmHsPEa9psLYQ1TNz1Ybh9STU6cvEDtshf7t" #https://apiv3.iucnredlist.org/, provide IUCN acess
IUCN.list <- iucn_summary(sp.list$`Nombre científico`, distr_detail= TRUE, ke =API)
# reacomodo de los datos
iucn_status(IUCN.list)
# data a base de datos
resultado_iucn<-iucn_status(IUCN.list) |> as.data.frame()
resultado_completo <- data.frame(Especie = sp.list$`Nombre científico`, Status = resultado_iucn)
# para descargar los datos
write.xlsx(resultado_completo, rowNames = FALSE)
# para descargar los datos
write_xlsx(resultado_completo, rowNames = FALSE)
# para descargar los datos
write_xlsx(resultado_completo, "resultado.xlsx")
resultado_completo
view(resultado_completo)
API <- "FPv1DeaaUkTrAD84ouZbgmK9pLFFPdkNUSAf" #https://apiv3.iucnredlist.org/, provide IUCN acess
IUCN.list <- iucn_summary(sp.list$`Nombre científico`, distr_detail= TRUE, ke =API)
# reacomodo de los datos
iucn_status(IUCN.list)
#| label: librerias
# liberias requeridas
library(taxize) # acceder a datos de UICN
library(tidyverse)
library(readxl)
library(rredlist)
library(writexl)
#| label: open data
data<- read_excel("especies.xlsx")
head(data)
glimpse(data)
sp.list<- data |> distinct(Scientific.name)
sp.list
# obteniendo datos UICN
API <- "FPv1DeaaUkTrAD84ouZbgmK9pLFFPdkNUSAf" #https://apiv3.iucnredlist.org/, provide IUCN acess
IUCN.list <- iucn_summary(sp.list$Scientific.name, distr_detail= TRUE, ke =API)
# reacomodo de los datos
iucn_status(IUCN.list)
# data a base de datos
resultado_iucn<-iucn_status(IUCN.list) |> as.data.frame()
resultado_completo <- data.frame(Especie = sp.list$Scientific.name, Status = resultado_iucn)
view(resultado_completo)
# para descargar los datos
#write_xlsx(resultado_completo, "resultado.xlsx")
#| label: open data
data<- read_excel("especies.xlsx")
head(data)
glimpse(data)
sp.list<- data |> distinct(Scientific.name)
sp.list
# obteniendo datos UICN
API <- "FPv1DeaaUkTrAD84ouZbgmK9pLFFPdkNUSAf" #https://apiv3.iucnredlist.org/, provide IUCN acess
IUCN.list <- iucn_summary(sp.list$Scientific.name, distr_detail= TRUE, ke =API)
# reacomodo de los datos
iucn_status(IUCN.list)
# data a base de datos
resultado_iucn<-iucn_status(IUCN.list) |> as.data.frame()
resultado_completo <- data.frame(Especie = sp.list$Scientific.name, Status = resultado_iucn)
view(resultado_completo)
# para descargar los datos
#write_xlsx(resultado_completo, "resultado.xlsx")
install.packages("httr")
library(httr)
API <- "FPv1DeaaUkTrAD84ouZbgmK9pLFFPdkNUSAf" #https://apiv3.iucnredlist.org/, provide IUCN acess
IUCN.list <- iucn_summary(sp.list$Scientific.name, distr_detail= TRUE, ke =API)
API <- "FPv1DeaaUkTrAD84ouZbgmK9pLFFPdkNUSAf" #https://apiv3.iucnredlist.org/, provide IUCN acess
IUCN.list <- iucn_summary(sp.list$Scientific.name, distr_detail= TRUE, ke =API)
# reacomodo de los datos
iucn_status(IUCN.list)
# data a base de datos
resultado_iucn<-iucn_status(IUCN.list) |> as.data.frame()
resultado_completo <- data.frame(Especie = sp.list$Scientific.name, Status = resultado_iucn)
view(resultado_completo)
# para descargar los datos
#write_xlsx(resultado_completo, "resultado.xlsx")
IUCN.list <- iucn_summary(sp.list$Scientific.name, distr_detail= TRUE, key =API)
API <- "FPv1DeaaUkTrAD84ouZbgmK9pLFFPdkNUSAf" #https://apiv3.iucnredlist.org/, provide IUCN acess
IUCN.list <- iucn_summary(sp.list$Scientific.name, distr_detail= TRUE, key =API)
# reacomodo de los datos
iucn_status(IUCN.list)
# data a base de datos
resultado_iucn<-iucn_status(IUCN.list) |> as.data.frame()
resultado_completo <- data.frame(Especie = sp.list$Scientific.name, Status = resultado_iucn)
view(resultado_completo)
# para descargar los datos
#write_xlsx(resultado_completo, "resultado.xlsx")
# obteniendo datos UICN
API <- "MuXfvwppcPU8NwRvszhKskays14Ld4q66cCD" #https://apiv3.iucnredlist.org/, provide IUCN acess
IUCN.list <- iucn_summary(sp.list$Scientific.name, distr_detail= TRUE, key =API)
#| label: librerias
# liberias requeridas
library(taxize) # acceder a datos de UICN
library(tidyverse)
library(readxl)
library(rredlist)
library(writexl)
library(httr)
#| label: open data
data<- read_excel("especies.xlsx")
head(data)
glimpse(data)
sp.list<- data |> distinct(Scientific.name)
sp.list
# obteniendo datos UICN
API <- "MuXfvwppcPU8NwRvszhKskays14Ld4q66cCD" #https://apiv3.iucnredlist.org/, provide IUCN acess
IUCN.list <- iucn_summary(sp.list$Scientific.name, distr_detail= TRUE, key =API)
# reacomodo de los datos
iucn_status(IUCN.list)
# data a base de datos
resultado_iucn<-iucn_status(IUCN.list) |> as.data.frame()
resultado_completo <- data.frame(Especie = sp.list$Scientific.name, Status = resultado_iucn)
view(resultado_completo)
# para descargar los datos
#write_xlsx(resultado_completo, "resultado.xlsx")
library(raster)
dem<- raster ("Capas/DEM.tif")
plot(dem)
dem
# para ver los valores maximos y minimos
summary(dem)
# Cargar cada raster de forma independiente
bio1<-raster("Cqpas/bio1.tif")
# Cargar cada raster de forma independiente
bio1<-raster("Capas/bio1.tif")
bio2<-raster("Capas/bio2.tif")
bio3<-raster("Capas/bio3.tif")
bio4<-raster("Capas/bio4.tif")
# Cargar cada raster de forma independiente
bio1<-raster("Capas/bio1.tif")
bio2<-raster("Capas/bio2.tif")
bio3<-raster("Capas/bio3.tif")
bio4<-raster("Capas/bio4.tif")
# Crear un stack
bios<-stack(bio1, bio2, bio3, bio4)
bios
plot(bios[[1]])
bio12_2<-bios[[3]]
# Cargar todos los raster de una carpeta en un stack
bios19<-stack(list.files(path="Capas/", pattern = ".tif", full.names = TRUE))
# Cargar todos los raster de una carpeta en un stack
bios19<-stack(list.files(path="Capas/", pattern = ".tif", full.names = TRUE))
bios19
plot(bios19)
b1<- raster("Capas/bio.tiff")
b1<- raster("Capas/bio1.tiff")
b1<- raster("Capas/bio1.tif")
install.packages("geodata")
install.packages("terra")
# install.packages("geodata")
library(geodata)
# install.packages("terra")
library(terra)
col_0 <- gadm("colombia", level = 0, version = "latest", resolution = 2, path = getwd())
col_0 <- gadm("colombia", level = 0, version = "latest", resolution = 2, path = getwd())
plot(col_0)
library(sf)
install.packages("sf")
#install.packages("sf")
library(sf)
col_sf <- st_as_sf(col_0)
write_sf(col_sf, "posts/Paquete_Terra/Colombia_LO.shp")
shp1 <- sf:: read_sf("Colombia_LO.shp")
shp1 <- sf::read_sf("Colombia_LO.shp")
dir()
setwd("~/Blog_apuntes_estadistica/posts/Paquete_Terra")
shp1 <- sf::read_sf("Colombia_LO.shp")
# especificando la columna
plot(shp1[,4])
shp1 <- sf::read_sf("Colombia_LO.shp") #<1>
shp2 <- terra::vect("Colombia_LO.shp")
# especificando la columna
plot(shp1[,4])
View(shp1)
shp1 <- sf::read_sf("COL_adm1.shp") #<1>
shp2 <- terra::vect("COL_adm1.shp")
# especificando la columna
plot(shp1[,4])
View(shp1)
plot(shp1, "NAME_1")
plot(shp2, "NAME_1")
library(dplyr)
library(dplyr)
# opción 1
arauca<- filter(shp1, NAME_1 == "Arauca")
plot(arauca)
plot(arauca[1])
plot(arauca[,1])
Boyaca <- subset(shp2, shp2$NAME_1 == "Boyacá")
plot(Boyaca)
crs(shp1)
crs(shp2)
shp1.b <- sf::st_transform(shp1, crs = 32618)
shp2
#| label: librerias necesarias
library(raster)
#| label: librerias necesarias
install.packages(raster)
#| label: librerias necesarias
install.packages("raster")
library(raster)
library(sf)
col_shp <- read_sf("Colombia_LO.shp")
setwd("~/Github repositorios/Blog_apuntes_estadistica/posts/operaciones-vector-raster")
col_shp <- read_sf("Colombia_LO.shp")
bio <- raster("DEM.tif")
plot(bio)
# librerias
library(raster)
library(sf)
# librerias
library(raster)
dir()
setwd("~/Github repositorios/Blog_apuntes_estadistica/posts/operaciones-vector-raster")
dir()
po_cut <- read_sf("data_0.shp")
plot(po_cut)
col_shp <- read_sf("data_0.shp")
bio <- raster("bio/bio1.tiff")
#| label: librerias necesarias
library(raster)
bio <- raster("bio/bio1.tiff")
bio_1 <- raster("bio/bio1.tiff")
dir()
bio_1 <- raster("bio/bio2.tiff")
plot(bio_1)
bio_1 <- raster("bio2.tiff")
bio_1 <- raster("bio/bio2.tiff")
bio_1 <- raster("bio/bio2.tif")
plot(bio_1)
#| label: cortar con crop
# cortando shape con raster
b1 <- crop(bio_1, col_shp)
plot(b1)
#| label: cargar recursos
# cargar las capas
col_shp <- read_sf("data_0.shp")
plot(col_shp)
#| label: cortar
# cortando shape con raster
b2 <- mask(b1, col_shp)
# raster, poligono
plot(b2)
bio_1
# Juntando las funciones para que sea un solo comando
cortado <- bio |> crop(col_shp) |> mask(col_shp)
# Juntando las funciones para que sea un solo comando
cortado <- bio_1 |> crop(col_shp) |> mask(col_shp)
plot(cortado)
# extraer puntos
ext_bio <- rasterToPoints(cortado)
View(ext_bio)
# extraer puntos
ext_bio <- rasterToPoints(cortado) |> as.data.frame()
ggplot(ext_bio, aes(bio2)) |> geom_density()
library(ggplot2)
ggplot(ext_bio, aes(bio2)) |> geom_density()
ggplot(data= ext_bio, aes(bio2)) |> geom_density(col="black")
ggplot() |> geom_density(data= ext_bio, aes(x=bio2), col="black")
ggplot() + geom_density(data= ext_bio, aes(x=bio2), col="black")
ggplot() + geom_density(data= ext_bio, aes(x=bio2), col="black") + theme_bw()
library(tidyverse)
dir()
registro <- read.csv("Registros.csv", header = TRUE)
registro <- read.csv2("Registros.csv", header = TRUE)
View(registros)
puntos <- read.csv2("Registros.csv", header = TRUE)
bios1 <- raster("wc5/bio1.bil") # Temp promedio anual
library(readr)
puntos <- read.csv("Registros.csv", header = TRUE)
puntos <- read.csv("Registros.csv", header = TRUE)
plot(bios1)
points(puntos[,c(7:6)])
ta_sp <- extract(bios1, puntos[,c(7:6)])
ta_sp <- extract(bios1, puntos[,c(7:6)])
bios1 <- raster("wc5/bio1.bil") # Temp promedio anual
puntos
view(puntos)
ta_sp <- extract(bios1, puntos[,c(7:6)])
points(puntos[,c(7:6)])
ta_sp <- extract(bios1, puntos[,c(7:6)])
library(raster)
ta_sp <- extract(bios1, puntos[,c(7:6)])
ta_sp
